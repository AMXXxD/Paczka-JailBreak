/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <jailbreak>
#include <fun>

#define TASK_STOLICE 333

new const g_szStolice[][][] = { //dopisz
	{ "Polska", "Warszawa" },
	{ "Hiszpania", "Madryt" },
	{ "Wielka Brytania", "Londyn" },
	{ "Ukraina", "Kijow" },
	{ "Wlochy", "Rzym" },
	{ "Austria", "Wieden" },
	{ "Belgia", "Bruksela" },
	{ "Czechy", "Praga" },
	{ "Dania", "Kopenhaga" },
	{ "Egipt", "Kair" },
	{ "Senegal", "Dakar" },
	{ "Peru", "Lima" },
	{ "Argentyna", "Buenos Aires" },
	{ "USA", "Waszyngton" },
	{ "Chiny", "Pekin" },
	{ "Indie", "Delhi" },
	{ "Japonia", "Tokyo" },
	{ "Niemcy", "Berlin" }
};

new g_iHud, bool:g_bZabawaStolice;

new g_szPanstwo[64];
new g_szStolica[64];

public plugin_init() {
	register_plugin("Stolice", "1.0", "");
	
	register_logevent("ev_KoniecRundy", 2, "1=Round_End")
	register_clcmd("say /stolice", "cmd_Stolice");
	
	register_clcmd("stolice_Panstwo", "cmd_WpisalPanstwo");
	register_clcmd("stolice_Stolica", "cmd_WpisalStolice");
	
	register_clcmd("say", "cmd_Czat");
	
	g_iHud = CreateHudSyncObj();
}

public plugin_natives()
{
	register_native("jail_menu_stolice", "cmd_Stolice", 1);	
}

public ev_KoniecRundy() {
	ClearSyncHud(0, g_iHud);
	remove_task(TASK_STOLICE);
	g_bZabawaStolice = false;
}
	

public cmd_Stolice(id) {
	if(get_user_team(id) != 2 || !is_user_alive(id)) {
		return PLUGIN_HANDLED;
	}
	
	if(jail_get_play_game_id() >= 6) {
		PokazWiadomosc(id, "Stolice sa niedostepne podczas zabaw!");
		return PLUGIN_HANDLED;
	}
	
	if(jail_get_prowadzacy() != id) {
		PokazWiadomosc(id, "Stolice sa dostepne tylko dla prowadzacego!");
		return PLUGIN_HANDLED;
	}
	
	if(task_exists(TASK_STOLICE)) {
		PokazWiadomosc(id, "Trwa odliczanie...");
		return PLUGIN_HANDLED;
	}
	
	if(g_bZabawaStolice) {
		new iMenu = menu_create(fmt("\d%s | Menu^n\r[MENU]\w Aktualnie zabawa juz trwa.^nChcesz ja zakonczyc?", forum), "ZakonczZabawe_Handler");
		
		menu_additem(iMenu, "Tak");
		menu_additem(iMenu, "Nie");
		
		menu_setprop(iMenu, MPROP_EXIT, MEXIT_NEVER);
		
		menu_display(id, iMenu);
		return PLUGIN_HANDLED;
	}	
	
	copy(g_szPanstwo, 63, "");
	copy(g_szStolica, 63, "");
	
	new iMenu = menu_create(fmt("\d%s | Menu^n\r[MENU]\w Wybierz kraj i stolice:", forum), "Stolice_Handler");
	
	menu_additem(iMenu, "\rWlasna propozycja");
	
	for(new i = 0; i < sizeof g_szStolice; i++) {
		menu_additem(iMenu, fmt("\d×\w %s -> %s", g_szStolice[i][0], g_szStolice[i][1])); 
	}
	
	menu_setprop(iMenu, MPROP_BACKNAME, "\d×\w Wroc");
	menu_setprop(iMenu, MPROP_NEXTNAME, "\d×\w Dalej");
	menu_setprop(iMenu, MPROP_EXITNAME, "\d×\w Wyjdz");
	menu_display(id, iMenu);
	
	return PLUGIN_HANDLED;
}

public Stolice_Handler(id, iMenu, iItem) {
	if(iItem < 0) {
		if(iItem == MENU_EXIT) {
			menu_destroy(iMenu);
		}
		
		return PLUGIN_CONTINUE;
	}
	
	if(iItem == 0) {
		client_cmd(id, "messagemode stolice_Panstwo");
		
		PokazWiadomosc(id, "Wpisz^3 panstwo.");
	} else {
		new iIdPanstwa = iItem - 1;
		
		copy(g_szPanstwo, 63, g_szStolice[iIdPanstwa][0]);
		copy(g_szStolica, 63, g_szStolice[iIdPanstwa][1]);
		
		ZacznijZabawe(id);
	}
	
	menu_destroy(iMenu);
	return PLUGIN_CONTINUE;
}

public ZakonczZabawe_Handler(id, iMenu, iItem) {
	if(iItem == 0) {
		g_bZabawaStolice = false;
		
		ClearSyncHud(0, g_iHud);
		PokazWiadomosc(0, "Prowadzacy zakonczyl zabawe w^3 stolice.");
		PokazWiadomosc(0, "Prawidlowa odpowiedz:^3 %s", g_szStolica);
	}
	
	menu_destroy(iMenu);
}

public cmd_WpisalPanstwo(id) {
	read_argv(1, g_szPanstwo, 63);
	
	for(new i = 0; i < 3; i++) {
		PokazWiadomosc(id, "Podane panstwo:^3 %s", g_szPanstwo);
	}
	
	client_cmd(id, "messagemode stolice_Stolica");
	
	PokazWiadomosc(id, "Wpisz^3 stolice.");
	return PLUGIN_HANDLED;
}

public cmd_WpisalStolice(id) {
	read_argv(1, g_szStolica, 63);
	
	for(new i = 0; i < 3; i++) {
		PokazWiadomosc(id, "Podana stolica:^3 %s", g_szStolica);
	}
	
	ZacznijZabawe(id);
	
	return PLUGIN_HANDLED;
}

ZacznijZabawe(id) {
	if(jail_get_play_game_id() >= 6 || jail_get_prowadzacy() != id || task_exists(TASK_STOLICE) || g_bZabawaStolice) {
		PokazWiadomosc(id, "Wystąpił błąd.");
		return;
	}
	
	new iDane[1];
	
	iDane[0] = 8;
	task_Odliczanie(iDane, TASK_STOLICE);
	
	PokazWiadomosc(0, "Zaczynamy zabawe w stolice!");
	PokazWiadomosc(0, "Na srodku ekranu pojawi się panstwo, kto pierwszy zgadnie jego stolice?");
	PokazWiadomosc(0, "Odpowiedz podajemy na czacie.");
}

public task_Odliczanie(iDane[1], iTaskId) {
	if(iDane[0] <= 0) {
		g_bZabawaStolice = true;
		
		set_hudmessage(85, 170, 255, -1.0, 0.15, 0, 10.0, 10.0, 0.1, 0.1, 2);
		ShowSyncHudMsg(0, g_iHud, "Kraj: %s^nStolica: ?^nOdpowiedz wpisz na czacie!", g_szPanstwo);
		
		PokazWiadomosc(0, "Kraj:^3 %s", g_szPanstwo);
		PokazWiadomosc(0, "Stolica:^3 ?");
		PokazWiadomosc(0, "Odpowiedz wpisz na czacie!");
		
		client_cmd(0, "spk ^"buttons/bell1^"");
		
		return PLUGIN_CONTINUE;
	}
	
	new szLiczba[8];
	
	set_hudmessage(85, 170, 255, -1.0, 0.15, 0, 1.0, 1.2, 0.1, 0.1, 2);
	ShowSyncHudMsg(0, g_iHud, "Podaje stolice za %d!", iDane[0]);
	
	num_to_word(iDane[0], szLiczba, 7);
	client_cmd(0, "spk ^"%s^"", szLiczba);
	
	iDane[0] --;
	set_task(1.0, "task_Odliczanie", TASK_STOLICE, iDane, 1);
	
	return PLUGIN_CONTINUE;
}

public cmd_Czat(id) {
	if(!g_bZabawaStolice || get_user_team(id) != 1 || !is_user_alive(id)) {
		return PLUGIN_CONTINUE;
	}
	
	new szWiadomosc[192];
	
	read_argv(1, szWiadomosc, 191);
	trim(szWiadomosc);
	
	if(equali(szWiadomosc, g_szStolica)) {
		new szNick[32];
		
		get_user_name(id, szNick, 31);
		
		ClearSyncHud(0, g_iHud);
		
		set_user_rendering(id, kRenderFxGlowShell, 0, 170, 255, kRenderNormal, 16);
		PokazWiadomosc(0, "Stolice zgadl^3 %s", szNick);
		PokazWiadomosc(0, "Prawidlowa odpowiedz:^3 %s", g_szStolica);
		
		client_cmd(0, "spk ^"events/task_complete^"");
		
		set_task(5.0, "task_UsunKolor", id);
		
		g_bZabawaStolice = false;
	}
	
	return PLUGIN_CONTINUE;
}

public task_UsunKolor(id) {
	if(is_user_alive(id)) {
		set_user_rendering(id);
	}
}

	
		
